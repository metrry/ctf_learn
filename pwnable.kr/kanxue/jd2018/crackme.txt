1. 解压缩，题目为exe可执行程序；
2. 拿到题目先不着急上ida或者od分析，先执行一下题目看一下提示信息，提示信息[please input your serial:]，随意输入提示“wrong”，看来题目的结果就是要输入正确的序列号。接下来上ida或者od进行分析。
3. 比较熟悉ida，用ida直接打开，可以发现比较清晰的代码入口，看来并没有其他防护措施，第一题一般也不会太难。直接f5可以得到程序的执行流程和结果。


猜测考察的地方：
1. 重复字符串操作前缀 rep、repe/repz、repne/repnz
这几条指令的意思是按计数寄存器（ecx）中指定的次数来重复执行字符串指令
rep前缀可以添加到ins、outs、movs、lods、stos指令
repe、 repne、repz、repnz前缀可以添加到cmps、scas指令
--------------------------------------------------
|  重复前缀   |    终止条件1     |   终止条件2   |
--------------------------------------------------
|    rep      |       ecx=0      |        无     |
|  repe/repz  |       ecx=0      |       zf=0    |
| repne/repnz |       ecx=0      |       zf=1    |
--------------------------------------------------


2. 数据传输指令 movsb movsw movsd
从源地址向目的地址传送数据
16位模式下 ds:si =>>> es:di
32位模式下 ds:esi =>>> es:edi
注意：在传送完成后，si/esi、di/edi会增加或减小。
当 df=0时，表示正向传送，传送之后增加
当 df=1时，表示反向传送，传送之后减小
区别在于传送的字节数不一样,分别为1、2、4


3. 字符串操作指令 scasb、scasw
把al或ax中的数据与es:di或es:edi指向的存储单元中的数据相减，影响标志位，然后根据df标志分别增减di
                                                 

4. 利用repne scas来计算字符串长度：
mov ecx, ffffffffh      #设置循环次数为-1
sub eax, eax            #设置搜索内容为0
repnz scasb             #一直重复搜索到edi字符串末尾的0
not ecx                 #得到搜索次数，也就是字符串的完整长度
desc ecx                #得到字符串不包含末尾0的长度


5. 利用rep movs来实现strcpy函数：strcpy(str, dst, 35)
mov ecx, 8              #设置循环次数为8
mov esi, src            #src
mov edi, dst            #dst
rep movsd               #循环8次，把ds:esi中的数据传送到es:edi中，每次传送4个字节
movsw                   #传送2个字节
movsb                   #传送1个字节


